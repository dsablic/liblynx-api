# encoding: utf-8
# frozen_string_literal: true

#
# WARNING: Do not edit by hand, this file was generated by Heroics:
#
#   https://github.com/interagent/heroics
#

require 'heroics'
require 'uri'
require 'moneta'

module LibLynxAPI
  # Get a Client configured to use HTTP Basic or header-based authentication.
  #
  # @param api_key [String] The API key to use when connecting.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache`, `user` and `url`.
  # @return [Client] A client configured to use the API with HTTP Basic
  #   or header-based authentication.
  def self.connect(api_key, options=nil)
    options = custom_options(options)
    uri = URI.parse(options[:url])

    if options[:user]
      uri.user = URI.encode_www_form_component options[:user]
    end

    if api_key
      uri.user ||= 'user'
      uri.password = api_key
    end

    client = Heroics.client_from_schema(SCHEMA, uri.to_s, options)
    Client.new(client)
  end

  # Get a Client configured to use OAuth authentication.
  #
  # @param oauth_token [String] The OAuth token to use with the API.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache` and `url`.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_oauth(oauth_token, options=nil)
    options = custom_options(options)
    url = options[:url]
    client = Heroics.oauth_client_from_schema(oauth_token, SCHEMA, url, options)
    Client.new(client)
  end

  # Get a Client configured to use Token authentication.
  #
  # @param token [String] The token to use with the API.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache` and `url`.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_token(token, options=nil)
    options = custom_options(options)
    url = options[:url]
    client = Heroics.token_client_from_schema(token, SCHEMA, url, options)
    Client.new(client)
  end

  # Get customized options.
  def self.custom_options(options)
    return default_options if options.nil?

    final_options = default_options
    if options[:default_headers]
      final_options[:default_headers].merge!(options[:default_headers])
    end
    final_options[:cache] = options[:cache] || Moneta.new(:File, dir: "#{Dir.home}/.heroics/liblynx-api")
    final_options[:url] = options[:url] if options[:url]
    final_options[:user] = options[:user] if options[:user]
    final_options
  end

  # Get the default options.
  def self.default_options
    default_headers = {"Accept"=>"application/json", "User-Agent"=>"liblynx-api/0.0.2"}
    {
      default_headers: default_headers,
      url:             "https://connect.liblynx.com"
    }
  end

  private_class_method :default_options, :custom_options

  # LibLynx API schema
  class Client
    def initialize(client)
      @client = client
    end

    # FIXME
    #
    # @return [Account]
    def account
      @account_resource ||= Account.new(@client)
    end

    # 
    #
    # @return [Identification]
    def identification
      @identification_resource ||= Identification.new(@client)
    end

    # 
    #
    # @return [Token]
    def token
      @token_resource ||= Token.new(@client)
    end
  end

  private

  # FIXME
  class Account
    def initialize(client)
      @client = client
    end

    # Info for existing account.
    #
    # @param account_id: unique identifier of account
    def info(account_id)
      @client.account.info(account_id)
    end

    # List existing accounts.
    def list()
      @client.account.list()
    end

    # Update an existing account.
    #
    # @param account_id: unique identifier of account
    # @param body: the object to pass as the request payload
    def update(account_id, body = {})
      @client.account.update(account_id, body)
    end
  end

  # 
  class Identification
    def initialize(client)
      @client = client
    end

    # create a new identification resource to try and identify an account to link a new session with
    #
    # @param body: the object to pass as the request payload
    def create(body = {})
      @client.identification.create(body)
    end

    # retrieve a single identification object
    #
    # @param identification_id: unique identifier of identification
    def info(identification_id)
      @client.identification.info(identification_id)
    end

    # listing and search recent identifications
    def list()
      @client.identification.list()
    end
  end

  # 
  class Token
    def initialize(client)
      @client = client
    end

    # Create a new oauth2 token
    #
    # @param body: the object to pass as the request payload
    def create(body = {})
      @client.token.create(body)
    end
  end

  SCHEMA = Heroics::Schema.new(MultiJson.load(<<-'HEROICS_SCHEMA'))
{
  "$schema": "http://interagent.github.io/interagent-hyper-schema",
  "type": [
    "object"
  ],
  "definitions": {
    "account": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "title": "FIXME - Account",
      "description": "FIXME",
      "stability": "prototype",
      "strictProperties": true,
      "type": [
        "object"
      ],
      "definitions": {
        "id": {
          "description": "unique identifier of account",
          "readOnly": true,
          "format": "uuid",
          "type": [
            "string"
          ]
        },
        "account_name": {
          "description": "unique name of account",
          "readOnly": true,
          "type": [
            "string"
          ]
        },
        "identity": {
          "anyOf": [
            {
              "$ref": "#/definitions/account/definitions/id"
            }
          ]
        },
        "creation_date": {
          "description": "when account was created",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "modified_date": {
          "description": "when account was updated",
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "links": [
        {
          "description": "Info for existing account.",
          "href": "/accounts/{(%23%2Fdefinitions%2Faccount%2Fdefinitions%2Fidentity)}",
          "method": "GET",
          "rel": "self",
          "title": "Info"
        },
        {
          "description": "List existing accounts.",
          "href": "/api/accounts",
          "method": "GET",
          "rel": "instances",
          "title": "List"
        },
        {
          "description": "Update an existing account.",
          "href": "/accounts/{(%23%2Fdefinitions%2Faccount%2Fdefinitions%2Fidentity)}",
          "method": "PATCH",
          "rel": "update",
          "schema": {
            "properties": {
            },
            "type": [
              "object"
            ]
          },
          "title": "Update"
        }
      ],
      "properties": {
        "created_at": {
          "$ref": "#/definitions/account/definitions/created_date"
        },
        "id": {
          "$ref": "#/definitions/account/definitions/id"
        },
        "name": {
          "$ref": "#/definitions/account/definitions/account_name"
        },
        "updated_at": {
          "$ref": "#/definitions/account/definitions/modified_date"
        }
      }
    },
    "identification": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "title": "Identification",
      "description": "",
      "stability": "prototype",
      "strictProperties": true,
      "type": [
        "object"
      ],
      "definitions": {
        "id": {
          "description": "unique identifier of identification",
          "readOnly": true,
          "format": "uuid",
          "type": [
            "string"
          ]
        },
        "identity": {
          "anyOf": [
            {
              "$ref": "#/definitions/identification/definitions/id"
            }
          ]
        },
        "created": {
          "description": "when identification was created",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "email": {
          "description": "user email address",
          "format": "email",
          "type": [
            "string"
          ]
        },
        "url": {
          "description": "callback url",
          "format": "url",
          "type": [
            "string"
          ]
        },
        "ip": {
          "description": "ip address",
          "format": "ip",
          "type": [
            "string"
          ]
        },
        "user_agent": {
          "description": "user agent",
          "type": [
            "string"
          ]
        }
      },
      "links": [
        {
          "description": "create a new identification resource to try and identify an account to link a new session with",
          "href": "/api/identifications",
          "method": "POST",
          "rel": "create",
          "schema": {
            "properties": {
              "email": {
                "$ref": "#/definitions/account/definitions/email"
              },
              "ip": {
                "$ref": "#/definitions/account/definitions/ip"
              },
              "user_agent": {
                "$ref": "#/definitions/account/definitions/user_agent"
              },
              "url": {
                "$ref": "#/definitions/account/definitions/url"
              }
            },
            "required": [
              "ip",
              "user_agent",
              "url"
            ],
            "type": [
              "object"
            ]
          },
          "title": "Create"
        },
        {
          "description": "retrieve a single identification object",
          "href": "/api/identifications/{(%23%2Fdefinitions%2Fidentification%2Fdefinitions%2Fidentity)}",
          "method": "GET",
          "rel": "self",
          "title": "Info"
        },
        {
          "description": "listing and search recent identifications",
          "href": "/api/identifications",
          "method": "GET",
          "rel": "instances",
          "title": "List"
        }
      ],
      "properties": {
        "created": {
          "$ref": "#/definitions/identification/definitions/created_at"
        },
        "id": {
          "$ref": "#/definitions/identification/definitions/id"
        }
      }
    },
    "token": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "title": "OAuth2 token",
      "description": "",
      "stability": "prototype",
      "strictProperties": true,
      "type": [
        "object"
      ],
      "definitions": {
      },
      "links": [
        {
          "description": "Create a new oauth2 token",
          "encType": "application/x-www-form-urlencoded",
          "href": "/oauth/v2/token",
          "method": "POST",
          "rel": "create",
          "schema": {
            "properties": {
            },
            "type": [
              "object"
            ]
          },
          "title": "Create"
        }
      ],
      "properties": {
      }
    }
  },
  "properties": {
    "account": {
      "$ref": "#/definitions/account"
    },
    "identification": {
      "$ref": "#/definitions/identification"
    },
    "token": {
      "$ref": "#/definitions/token"
    }
  },
  "description": "LibLynx API schema",
  "id": "http://connect.liblynx.com/schema#",
  "links": [
    {
      "href": "https://connect.liblynx.com",
      "rel": "self"
    }
  ],
  "title": "LibLynx API"
}
HEROICS_SCHEMA
end
